Homework 1: Recorded Keystrokes

** 1.1
1. emacs exer1.html

2. C-s H T M L Enter 

3. C-s s c M-b 

4. C-s s e M-b 

5. C-s a r r C-s M-b 

6. C-e 

7. C-a 

8. One could use C-a to go a line's beginning and C-e to go a line's end.

9. I did not use arrow keys to move the cursor. I have used keybindings above.
   Instead of arrow keys, we could use C-b and C-f to move left and right, and C-p and C-n for up and down.

10. C-x C-c

** 1.2
1. emacs exer2.html

2. M-g g 1 9 Enter C-k
 
3. C-s < ! C-a C-k

4. C-s < ! C-a C-k C-k C-k C-k C-k

5. C-s < ! C-b C-b C-M-k DEL C-s < ! C-a C-k C-k C-k C-k C-k C-k C-k M-> C-p C-k

** 1.3
1. emacs exer3.html

2. M-% A s s i g n m e n t SP 1 Enter A s s i g n m e n t SP 4 2 Enter y y q

3. M-< M-% U T F - 8 Enter U S - A S C I I Enter y q

4. M-< C-M-% [ ^ [ : a s c i i : ] ] Enter Enter !

5. C-s < / o C-e C-m

6. C-x C-c y Enter diff -u exer1.html exer2.html

** 1.4
1. cat exer2.html exer2.diff >exer4.html

2. emacs exer4.html

3. M-> C-p C-p C-f C-k C-y M-g g 4 3 2 Enter C-y 

4. M-> C-r < ! C-r C-SP C-n C-n C-n C-e C-x r s a 
C-r < ! C-r C-SP C-f C-e C-b C-b C-b C-b C-b C-x r s b 
C-r < ! C-r C-SP C-n C-n C-e C-x r s c 
C-r < ! C-r C-SP C-e C-x r s d 
C-r < ! C-r C-SP C-e C-x r s e 
C-r < / p C-n C-x r i a C-n C-d C-n C-d C-n C-d 
C-r s h M-f M-f M-f C-x r i b 
C-r < / h C-n C-n C-x r i c C-n C-d C-n C-d 
C-r < / h 2 C-r C-n C-n C-x r i d 
C-r < / h C-r C-n C-n C-x r i e 

# comments were saved in registers and then pasted.

5. C-s - - - SP C-a C-SP M-> C-w

6. C-x u

7. C-r - - - SP C-a C-SP M-> M-; 
# comments each line

8. M-< M-% < o l > Enter < o L > Enter !
   There were 7 occurences of "<ol>"

9. C-u M-! diff -u exer1.html exer4.html
*** diff output
--- exer1.html	2019-09-29 12:51:14.133151000 -0700
+++ exer4.html	2019-09-30 23:56:25.991606000 -0700
@@ -43,7 +43,7 @@
 introductions and tutorials.
 </p>
 
-<ol>
+<oL>
 <li>
 What shell command uses the <samp>man</samp> program
 to print all the commands that have a specific
@@ -161,7 +161,7 @@
 <section>
 <h3>Exercise 1.1: Moving around in Emacs</h3>
 
-<ol>
+<oL>
 <li>Use Emacs to edit the file <samp>exer1.html</samp>.</li>
 <li>Move the cursor to just after the first occurrence of the word "HTML" (all upper-case).</li>
 <li>Now move the cursor to the start of the first later occurrence of the word "scavenger".</li>
@@ -183,7 +183,7 @@
 <section>
 <h3>Exercise 1.2: Deleting text in Emacs</h3>
 
-<ol>
+<oL>
 <li>Use Emacs to edit the file <samp>exer2.html</samp>. The idea is to
 delete its HTML comments; the resulting page should display the same
 text as the original.</li>
@@ -213,7 +213,7 @@
 <section>
 <h3>Exercise 1.3: Inserting text in Emacs</h3>
 
-<ol>
+<oL>
 <li>Use Emacs to edit the file <samp>exer3.html</samp>.</li>
 
 <li>Change the first two instances of "Assignment 1" to "Assignment 42".</li>
@@ -238,7 +238,7 @@
 that you should know, like copy and paste, search and replace, and undo.
 </p>
 
-<ol>
+<oL>
 <li>Execute the command "<samp>cat exer2.html exer2.diff &gt;exer4.html</samp>"
 to create a file <samp>exer4.html</samp> that contains a copy of <samp>exer2.html</samp> followed by a copy of <samp>exer2.diff</samp>.</li>
 <li>Use Emacs to edit the file <samp>exer4.html</samp>.
@@ -279,7 +279,7 @@
 Do these tasks all within Emacs. Don't use a shell subcommand
 if you can avoid it.</p>
 
-<ol>
+<oL>
 <li>Create a new directory named "<samp>junk</samp>" that's right under
 your home directory.</li>
 
@@ -329,7 +329,7 @@
 <section>
 <h3>Exercise 1.6: Running Elisp code</h3>
 
-<ol>
+<oL>
 <li>Visit Emacs's <samp>*scratch*</samp> buffer.</li>
 
 <li>In the buffer, seed the random number generator with your student
@@ -435,3 +435,54 @@
 </body>
 </html>
 <!-- end of HTML resource -->
+<!-- --- exer1.html	2019-09-29 12:51:14.133151000 -0700 -->
+<!-- +++ exer2.html	2019-09-29 18:06:22.112362000 -0700 -->
+<!-- @@ -16,7 +16,7 @@ -->
+<!--  <section> -->
+<!--  <h2>Laboratory: Linux and Emacs scavenger hunt</h2> -->
+ 
+<!-- -<\!-- diff，在UNIX系統上的一個工具程式，它可以比較兩個檔案之間的不同。通常它被用來比較同一個檔案，在不同版本間的差異。它可以產生一個擴展名為.diff或.patch的檔案，這個檔案可以被另一個工具程式patch來使用。-\-> -->
+<!-- + -->
+ 
+<!--  <p>Instructions: Do this assignment on the SEASnet GNU/Linux servers -->
+<!--  <samp>lnxsrv06</samp>, <samp>lnxsrv07</samp>, -->
+<!-- @@ -127,7 +127,7 @@ -->
+<!--  <section> -->
+<!--  <h2>Homework: Learning to use Emacs</h2> -->
+ 
+<!-- -<\!-- DELETE-ME DELETE-ME DELETE-ME -\-> -->
+<!-- + -->
+ 
+<!--  <ul> -->
+<!--   <li>Keith Waclena, <a -->
+<!-- @@ -366,9 +366,7 @@ -->
+<!--  <section> -->
+<!--  <h2>Submit</h2> -->
+ 
+<!-- -<\!-- You can learn more about HTML comments at -->
+<!-- -	<https://en.wikipedia.org/wiki/HTML_comment#Comments>. -->
+<!-- -	-\-> -->
+<!-- + -->
+ 
+<!--  <p>Submit the following two files, in either plain-text or Org format -->
+<!--  (your choice).</p> -->
+<!-- @@ -412,11 +410,8 @@ -->
+<!--  <samp>LC_ALL=C awk '/[^\t\f -~]/' key1.txt ans1.txt #</samp> <em>(if you submit .txt files)</em> -->
+<!--  </pre> -->
+ 
+<!-- -<p>should output nothing<\!---\->.</p> -->
+<!-- -<\!-- -->
+<!-- -<p>Or maybe more lines, if something has gone wrong.</p> -->
+<!-- --<->- -->
+<!-- --\-> -->
+<!-- +<p>should output nothing.</p> -->
+<!-- + -->
+<!--  </section> -->
+ 
+<!--  <footer> -->
+<!-- @@ -434,4 +429,4 @@ -->
+ 
+<!--  </body> -->
+<!--  </html> -->
+<!-- -<\!-- end of HTML resource -\-> -->
+<!-- + -->

** 1.5
1. C-x d C-a C-k ~ Enter + j u n k Enter

2. C-x C-f h e l l o . c Enter

3. M-x compile Enter gcc -o hello hello.c

4. C-x 4 b h e l l o - o u t Enter C-u M-! . / h e l l o Enter

5. C-k C-y C-x o C-j C-y
   Output: EOF on input
** 1.6
1. C-x b * s c r a t c h * Enter

2. (random "804-997-981") C-j
   Output: 1140942028146362650

3. (setq x (random)) C-j 
   Output: 393927644122541317
   (setq y (random)) C-j
   Output: 2291490304896529159

4. The product of x and y is 590531496128592419.
   x and y are large numbers, suggesting that the product was beyond 2^(61) - 1: an overflow.

5. The output was the above product with its octal and hexadecimal representation: the hex representation had 62 bits.

6. They are not truly random since we use a pseudo-random number generator: we can get the same x and y by using the same seed in the random number generator.

7. There is a 70% - 75% chance that two products would be mathematically incorrect (with the lower bound as 50%) if we picked two numbers randomly.

I discovered through some overflow tests that the integer type in Lisp on this server is limited between 2^(61) - 1 and -2^(61). 
If we reduce the case to numbers between 2^(30) and 2^(-30), we are guaranteed 2^(120) pairs of numbers whose products are correct. 
Dealing with the remaining numbers, I chose the "middle point" 2^(45) and found that there had to be 2^(15) non-negative integers whose products are 
correct.

So, the final probability calculation is P = 1 - [2^(120) + 2^(15) *  2^(31) * 2]/2^(122) = 75% (roughly)
